---

title: "Needs assessment Diss"

output: html_document

---


Clean the data
1. Clean the date completed
```{r}
library(prettyR)
setwd("~/Google Drive/Diss/Results/targeted_needs_survey")

#setwd("/Volumes/GoogleDrive/My Drive/Diss/Results/targeted_needs_survey")
data_needs = read.csv("CRINeedsAssessment_DATA_2020-10-15_1653.csv", header  = TRUE)
### Remove me, Taylor, Nathan, Jennifer, Bre, and Joan before we count for percentage complete
data_needs$keep = ifelse(data_needs$name == "Matt", 0, ifelse(data_needs$email == "Bre.Banks@centerstone.org", 0, ifelse(data_needs$email == "Joan.Sykora@centerstone.org", 0, ifelse(data_needs$email == "Nathan.Nehrt@centerstone.org", 0, ifelse(data_needs$email == "Taylor.Moore@centerstone.org", 0, ifelse(data_needs$email == "Jennifer.Lockman@centerstone.org", 0, 1))))))
data_needs = subset(data_needs, keep == 1)
data_needs$keep = NULL
# check it worked
sum(data_needs$email == "Bre.Banks@centerstone.org")
dat_needs = data_needs
library(lubridate)
head(dat_needs)

total_n = dim(dat_needs)[1]
# Only include those who consented
dat_needs = subset(dat_needs, consent_yes_no == "1")
total_consented = dim(dat_needs)[1]
# Only include those completed the survey
dat_needs = subset(dat_needs, needs_assessment_timestamp != "[not completed]")
total_completed = dim(dat_needs)[1]
write.csv(dat_needs, "dat_needs.csv", row.names = FALSE)
```
Get the percentage of people who completed the survey and n
```{r}
percent_complete = round(total_completed / total_n, 2)
n_results = cbind(total_n, total_consented, total_completed, percent_complete)
n_results
```

Get a count and percentage of pss 
0 is first then 1

Codebook info:

1, Environmental support | 2, Funding stability | 3, Partnerships | 4, Organizational capacity | 5, Program evaluation | 6, Program adaptation | 7, Communications | 8, Strategic planning

What program sustainability supporters, if any, would you like to know or know more about?
```{r}
pss_dat = dat_needs[,5:12]

bpeps_fun = function(dat){
  results  = apply(dat, 2, function(x){describe.factor(x, decr.order = FALSE)})
  results  = unlist(results)
  results = matrix(results, ncol = 4, byrow = TRUE)
  results = results[,3:4]
  results = data.frame(results)
  names(results) = c("count", "percentage")
  names_dat =  names(dat)
  results = data.frame(names_dat, results)
  results$percentage = round(results$percentage, 2)
  return(results)
}
pss_results =  bpeps_fun(pss_dat)
pss_results$names_dat = c("Environmental support", "Funding stability", "Partnerships", "Organizational capacity", "Program evaluation", "Program adaptation", "Communications", "Strategic planning")
pss_results$names_dat = ifelse(pss_results$percentage >= 50, paste0(pss_results$names_dat, "*"), pss_results$names_dat)
pss_results$percentage = paste0(pss_results$percentage, "%")
pss_results
write.csv(pss_results, "pss_results.csv", row.names = FALSE)
```


bpeps results

What best practices in evaluating program sustainability, if any, would you like to know or know more about?

1, Developing prospective questions | 2, Identifying and evaluating systems affecting program sustainability | 3, Sustainment of the program evaluation | 4, Evaluation of program sustainability checklists | 5, Logic models for evaluating program sustainability | 6, Program evaluation implementation frameworks
```{r}
bpeps_dat = dat_needs[,13:18]
bpeps_results =  bpeps_fun(bpeps_dat)
bpeps_results
bpeps_results$names_dat = c("Developing prospective questions", "Identifying and evaluating systems affecting program sustainability", "Sustainment of the program evaluation", "Evaluation of program sustainability checklists", "Logic models for evaluating program sustainability", "Program evaluation implementation frameworks")
bpeps_results$names_dat = ifelse(bpeps_results$percentage >= 50, paste0(bpeps_results$names_dat, "*"), bpeps_results$names_dat)
bpeps_results$percentage = paste0(bpeps_results$percentage, "%")

bpeps_results
write.csv(bpeps_results, "bpeps_results.csv", row.names = FALSE)
```
Function for confidence in pss and bpeps
```{r}
confit_pss_bpeps =  dat_needs[,19:32]
mean_sd_fun = function(dat){
dat_mean = apply(dat, 2, mean, na.rm = TRUE)
dat_sd = apply(dat, 2, sd, na.rm = TRUE)
dat_mean_sd =  cbind(dat_mean, dat_sd)
names(dat_mean_sd) = c("mean", "sd")
dat_mean_sd = round(dat_mean_sd, 2)
return(dat_mean_sd)
}

confit_pss_bpeps_results = mean_sd_fun(confit_pss_bpeps)
confit_pss_bpeps_results
names_confit = c("Environmental support", "Funding stability", "Partnerships", "Organizational capacity", "Program evaluation", "Program adaptation", "Communication", "Strategic planning", "Developing prospective questions", "Identifying and evaluating systems affecting program sustainability", "Sustainment of the program evaluation", "Evaluation of program sustainability checklists", "Logic models for evaluating program sustainability", "Program evaluation implementation frameworks")
confit_pss_bpeps_results = data.frame(names_confit, confit_pss_bpeps_results)
confit_pss_bpeps_results
names(confit_pss_bpeps_results) = c("PSS and BPEPS", "mean", "sd")
confit_pss_bpeps_results$mean = ifelse(confit_pss_bpeps_results$mean >= 2.5, paste0(confit_pss_bpeps_results$mean, "*"), confit_pss_bpeps_results$mean)
write.csv(confit_pss_bpeps_results, "confit_pss_bpeps_results.csv", row.names = FALSE)
```
See if anything has completed a training in evaluating program sustainabiltiy before
```{r}
describe.factor(dat_needs$complete_train)
```

Training preferences
training_cri

Describe your level of agreement with the statement about the following online learning strategies: 
I prefer the stated online learning strategy
Opportunity to practice
Student to student interactions
Student to teacher interactions
Using text and other media in training
Feedback provided (either from students or teacher)
Problem based learning
Active learning approaches
Reducing cognitive load (i.e., taking breaks)
Synchronous video (i.e., live)
Cognitive supports (e.g., diagrams, visual aids)
```{r}
ls_dat =  dat_needs[,37:46]
ls_dat_results = mean_sd_fun(ls_dat)
ls_dat_results
names_ls = c("Opportunity to practice",
"Student to student interactions", "Student to teacher interactions", "Using text and other media in training", "Feedback provided (either from students or teacher)", "Problem based learning", "Active learning approaches", "Reducing cognitive load (i.e., taking breaks)", "Synchronous video (i.e., live)", "Cognitive supports (e.g., diagrams, visual aids)")
ls_dat_results = data.frame(names_ls, ls_dat_results)
ls_dat_results
write.csv(ls_dat_results, "ls_dat_results.csv", row.names = FALSE)
mean(ls_dat_results$dat_mean)
```
Other prefered learning strategies
```{r}
other_learning_strats = data.frame(learning_prefer = dat_needs$learning_prefer)
other_learning_strats = na.omit(other_learning_strats)
other_learning_strats
write.csv(other_learning_strats, "other_learning_strats.csv")
```
Training length
```{r}
describe.factor(dat_needs$training_length)
```
Barriers, faciliators, and other general comments
```{r}
library(dplyr)
qual_fun = function(x, y){
dat = data.frame(results = x[y])
dat = dat %>% mutate_all(na_if,"")
dat = na.omit(dat)
return(dat)
}

barriers_train = qual_fun(dat_needs, "barriers_train")
write.csv(barriers_train, "barriers_train.csv", row.names = FALSE)

faciliators_train = qual_fun(dat_needs, "faciliators_train")
write.csv(faciliators_train, "faciliators_train.csv", row.names = FALSE)

general = qual_fun(dat_needs, "general")
write.csv(general, "general.csv", row.names = FALSE)
```
Demographics needs
ethnicity: Not enough
race: 1 = white 
gender: Not enough
edu: 1 greater than bachelor's 0 is some college and high school degree 
exp_eval: greater than two years = 1
exp_research greater than two years = 1
matt_time_spent = Greater than zero projects versus none or na = 1 
employment_length = Great than 4 which more than one year versus one year or less or na
```{r}
library(tableone)
## Remove 67 and 62 they are fill in the blanks not counts 
dat_needs[,67:69]
dat_needs[,62:69]
demos_dat = dat_needs[,c(54, 68:72)]
demos_dat[is.na(demos_dat)] = 1
names(demos_dat) = c("white", "bachelor_great", "exp_eval_2_great", "exp_research_2_great", "matt_time_spent_0_great", "employ_length_1_great")
demos_dat$bachelor_great = ifelse(demos_dat$bachelor_great > 1, 1, 0)
demos_dat$exp_eval_2_great = ifelse(demos_dat$exp_eval_2_great >= 5, 1, 0)
demos_dat$exp_research_2_great = ifelse(demos_dat$exp_research_2_great >= 5, 1, 0)
demos_dat$matt_time_spent_0_great = ifelse(demos_dat$matt_time_spent_0_great >= 2, 1, 0)
demos_dat$employ_length_1_great = ifelse(demos_dat$employ_length_1_great >= 5, 1, 0)
demos_dat = data.frame(apply(demos_dat, 2,as.factor))
demos_dat_results = CreateTableOne(data = demos_dat)
demos_dat_results = print(demos_dat_results, showAllLevels = TRUE)
demos_dat_results
```
















