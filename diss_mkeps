---
title: "Test"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
Load up AMT data
```{r}
setwd("C:/Users/Matthew.Hanauer/Google Drive/Diss/Results/mkeps_pilot")
#setwd("/Volumes/GoogleDrive/My Drive/Diss/Results/mkeps_pilot")
mkeps = read.csv("mkeps_10_31_20.csv", header = TRUE, na.strings = c("", " "))
head(mkeps)
library(lubridate)
mkeps =  mkeps[-c(1,2),] 
start_date = list()

for(i in 1:dim(mkeps)[1]){
 start_date[[i]] =  strsplit(mkeps$StartDate[[i]]," ")[[1]][1]
}

start_date = unlist(start_date)
start_date = ymd(start_date)
mkeps$StartDate = start_date
mkeps$StartDate

### Only include those from October and after, because that is when you started the study
mkeps = subset(mkeps, StartDate >= "2020-10-26")
dim(mkeps)

mkeps = mkeps[!is.na(mkeps$AMT_ID_5),]

```

Now just subset for payment
```{r}
mkeps$Q_RelevantIDFraudScore = as.numeric(mkeps$Q_RelevantIDFraudScore)
mkeps_payment = data.frame(Q_RelevantIDFraudScore = mkeps$Q_RelevantIDFraudScore,AMT_ID_5 =  mkeps$AMT_ID_5)
write.csv(mkeps_payment, "mkeps_payment.csv", row.names = FALSE)
## Keep the first time they responded by making it less than the threshold of 80

mkeps_payment

```
Clean data for grading
```{r}
mkeps$Q_RelevantIDFraudScore = as.numeric(mkeps$Q_RelevantIDFraudScore)
mkeps_grade = mkeps
### Just subset their AMT ID and mkeps questions for merging later
mkeps_grade = mkeps_grade[,c(6, 32:46, 55)]
## Get time to help you identify low quality repsonses
mkeps_grade$Duration..in.seconds. = as.numeric(mkeps_grade$Duration..in.seconds.)
mkeps_grade$minutes = mkeps_grade$Duration..in.seconds. / 60


mkeps_grade = subset(mkeps_grade, AMT_ID_check_4 != "A2HO2H720XV8HU" & AMT_ID_check_4 != "ACXP8KHFX06KR" & AMT_ID_check_4 != "AIX406KFA5O9J" & AMT_ID_check_4 != "A3JZYTT9UYV6U6" & AMT_ID_check_4 != "AMX69IKJUQ9EA" &  AMT_ID_check_4 != "A2F7DOEGHSENOY" &  AMT_ID_check_4 != "ALPH6Y4RS0G8C" &  AMT_ID_check_4 != "A2JET844BDM5YN" &  AMT_ID_check_4 != "A39CP46L3ODZHZ" &  AMT_ID_check_4 != "A2UJS8ELW3YUN9" &  AMT_ID_check_4 != "AH8EQV7IR97WE" &  AMT_ID_check_4 != "A5ZCUUP1MEKPJ" &  AMT_ID_check_4 != "A23C7BGEJEJOV8" & AMT_ID_check_4 != "A3LMF9D786PL8S" & AMT_ID_check_4 != "A3ANS61F3A656X" & AMT_ID_check_4 != "A1K8LPVDPWZSF9" & AMT_ID_check_4 != "AWHO5KT1KH28P" & AMT_ID_check_4 != "A2M6NAML0AGAJZ" & AMT_ID_check_4 != "A2OWM5OSE4SCFS" & AMT_ID_check_4 != "A39VB8OXHQZ6ZW" & AMT_ID_check_4 != "A1SGW0LMP12O59" &  AMT_ID_check_4 != "A3QN5EE1VSSJFS" & AMT_ID_check_4 != "A3OG21UO1AWTR7" & AMT_ID_check_4 != "A333RHGFT13OQM" & AMT_ID_check_4 != "A2RCT46ET5RNQN" & AMT_ID_check_4 != "A2ZLJQWCM8KU36" & AMT_ID_check_4 != "AE2U85I1TQ1E" & AMT_ID_check_4 != "A2TNZ157R0KWAC" & AMT_ID_check_4 != "COPIEDAXTUNPWPKSGPE" & AMT_ID_check_4 != "A1KXG3R48T74R3"  & AMT_ID_check_4 != "A2DIPD0N2YL9ST"  & AMT_ID_check_4 != "A36FVHZ2BEPYNM" & AMT_ID_check_4 != "AX6SVQJPPRLLJ" & AMT_ID_check_4 != "A28DMXUJCMX6SC" & AMT_ID_check_4 != "A3MNWO15YNEZNB" & AMT_ID_check_4 != "A82TD4PQWBMD1" & AMT_ID_check_4 != "A3RZAUWEE77S82" & AMT_ID_check_4 != "A3VGK3RB5D4NUM" & AMT_ID_check_4 != "A2QTJOFOT0709Q" & AMT_ID_check_4 != "A2F7DOEGHSENOY" & AMT_ID_check_4 != "A23C7BGEJEJOV8"  & AMT_ID_check_4 != "A6WKYH2T5ARRC" & AMT_ID_check_4 != "ACJFWPKW4JA59" & AMT_ID_check_4 != "A7NYDMF5BMLB7" & AMT_ID_check_4 != "A3JB1MBS7KFAGJ" & AMT_ID_check_4 != "A2M6NAML0AGAJZ" & AMT_ID_check_4 != "zgfdagdgdas" & AMT_ID_check_4 != "AAONZ5XA6MR5N" & AMT_ID_check_4 != "A3VRCG7T1S9D4J"  & AMT_ID_check_4 != "A2QTVSDHALU9GN" & AMT_ID_check_4 != "AJ5DO6BRNXQOA"  & AMT_ID_check_4 != "A3OUHE4W0AGUPE" & AMT_ID_check_4 != "A34IHD290HFEXY")

dim(mkeps_grade)
range(mkeps_grade$minutes)
mean(mkeps_grade$minutes)
mkeps_grade$Duration..in.seconds. = NULL
mkeps_grade$minutes = NULL
write.csv(mkeps_grade, "mkeps_grade.csv", row.names = FALSE)
dim(mkeps_grade)
```


Now just MKEPS for getting data for grading
```{r}

mkeps_grade
mkeps_grade_all_10_30_20 = mkeps_grade
write.csv(mkeps_grade_all_10_30_20, "mkeps_grade_all_10_30_20.csv", row.names = FALSE)

mkeps_grade_matt_sara_10_30_20 = mkeps_grade[1:36,]
write.csv(mkeps_grade_matt_sara_10_30_20, "mkeps_grade_matt_sara_10_30_20.csv", row.names = FALSE)
mkeps_grade_matt_elaina_10_30_20 = mkeps_grade[37:73,]
write.csv(mkeps_grade_matt_elaina_10_30_20, "mkeps_grade_matt_elaina_10_30_20.csv", row.names = FALSE)
mkeps_grade_sara_elaina_10_30_20 = mkeps_grade[74:110,]
write.csv(mkeps_grade_sara_elaina_10_30_20, "mkeps_grade_sara_elaina_10_30_20.csv", row.names = FALSE)



```
Now upload the graded data and link back
```{r}
setwd("C:/Users/Matthew.Hanauer/Google Drive/Diss/Results/mkeps_pilot")
mkeps_grade_example_10_21_20 = read.csv("mkeps_grade_example_10_21_20.csv", header = TRUE)
mkeps_grade_example_10_21_20
### Just get the score
mkeps_grade_example_10_21_20 = mkeps_grade_example_10_21_20[c(2,5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 46)]
### mkeps
mkeps_graded_10_21_20 = merge(mkeps_grade_example_10_21_20, mkeps, by = "AMT_ID_check_4")
dim(mkeps_graded_10_21_20)[1] == dim(mkeps_grade)[1]
```
Get participant characteristics 
```{r}
mkeps_grade
mkeps_demos = merge(mkeps, mkeps_grade, by = "AMT_ID_check_4", all.y = TRUE)
dim(mkeps_grade)[1] == dim(mkeps_grade)[1]
mkeps_demos = mkeps_demos[c("Duration..in.seconds.", "age", "edu", "english", "gender", "Q42", "race", "evaluation", "research", "AMT_ID_check_4")] 

names(mkeps_demos)[1] = "minutes"
mkeps_demos$minutes  = round(as.numeric(mkeps_demos$minutes) / 60)
names(mkeps_demos)[6] = "hispanic"
####
library(prettyR)
mkeps_demos$age = as.numeric(mkeps_demos$age)
mkeps_demos_results =  prettyR::describe(mkeps_demos[-c(10)])
mkeps_demos_results_num =  mkeps_demos_results$Numeric
mkeps_demos_results_num = t(data.frame(mkeps_demos_results_num))
mkeps_demos_results_num = mkeps_demos_results_num[,c(1,4)]
mkeps_demos_results_num
write.csv(mkeps_demos_results_num, "mkeps_demos_results_num.csv")
mkeps_demos_results_bin =  mkeps_demos_results$Factor
mkeps_demos_results_bin = t(data.frame(mkeps_demos_results_bin))
mkeps_demos_results_bin = round(mkeps_demos_results_bin, 2)
write.csv(mkeps_demos_results_bin, "mkeps_demos_results_bin.csv")
range(mkeps_demos$age)
range(mkeps_demos$minutes)
```
Evaluate differences Sara and Elaina
```{r}
setwd("C:/Users/Matthew.Hanauer/Google Drive/Diss/Results/mkeps_main/graded")
sara_elaina = read.csv("sara_elaina.csv", header = TRUE)
### Werid x variable remove
sara_elaina$X = NULL
elaina_sara = read.csv("elaina_sara.csv", header = TRUE)
elaina_sara_score =  elaina_sara[c(2,5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 46)]
sara_elaina_score = sara_elaina[c(2,5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 46)]
### Because of errors just shorten
elaina_sara_score = elaina_sara_score[1:18,]
elaina_sara_score[,1:15] = apply(elaina_sara_score[,1:15], 2, as.numeric)
sara_elaina_score = sara_elaina_score[1:18,]

score_diff_sara_elaina = sara_elaina_score[,1:15] - elaina_sara_score[,1:15]
write.csv(score_diff_sara_elaina, "score_diff_sara_elaina.csv", row.names = FALSE)
### Identify the rows 

```
Evaluate differences Elaina and Matt
```{r}
setwd("C:/Users/Matthew.Hanauer/Google Drive/Diss/Results/mkeps_main/graded")
elaina_matt = read.csv("elaina_matt.csv", header = TRUE)
matt_elaina = read.csv("matt_elaina.csv", header = TRUE)
library(dplyr)
elaina_matt_score = elaina_matt %>%
  select(2,5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 46) %>%
  slice(1:20)  

matt_elaina_score = matt_elaina %>%
  select(2,5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 46) %>%
  slice(1:20) 

score_diff_elaina_matt = elaina_matt_score[,1:15] - matt_elaina_score[,1:15]
write.csv(score_diff_elaina_matt, "score_diff_elaina_matt.csv", row.names = FALSE)

```


